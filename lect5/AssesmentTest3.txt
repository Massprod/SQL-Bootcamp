Complete the following task:

    Create a new database called "School" this database should have two tables:
        teachers and students.
    The students table should have columns:
        student_id,
        first_name,
        last_name,
        homeroom_number,
        phone,
        email,
        graduation year.
    The teachers table should have columns:
        teacher_id,
        first_name,
        last_name,
        homeroom_number,
        department,
        email,
        phone.
    The constraints are mostly up to you, but your table constraints do have to consider the following:
        - We must have a phone number to contact students in case of an emergency.
        - We must have ids as the primary key of the tables
        - Phone numbers and emails must be unique to the individual.
    Once you've made the tables, insert a student:
        named Mark Watney (student_id=1) who has a phone number of 777-555-1234 and doesn't have an email.
        He graduates in 2035 and has 5 as a homeroom number.
    Then insert a teacher:
        names Jonas Salk (teacher_id = 1) who as a homeroom number of 5 and is from the Biology department.
        His contact info is: jsalk@school.org and a phone number of 777-555-4321.

Solution:
    Only question is should I make homeroom_numer foreign key or not.
    Because we still will be able to join on that, because they're equal in all.
    But maybe it's better to make many_to_one -> like there's always 1 teacher for a homeroom
     but many students can be assigned to that. Hmm.
    But than we would need an extra table for homerooms?
    Let's build correct types first.
    !
    CREATE TABLE teachers (
        teacher_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL
         CONSTRAINT no_digits_specials_in_first_name CHECK(first_name ~ '^[^0-9@$!%*#?&)(\[\]\^\-\+\=\_\~]*$'),
        last_name VARCHAR(50) NOT NULL
         CONSTRAINT no_digits_specials_in_last_name CHECK(last_name ~ '^[^0-9@$!%*#?&)(\[\]\^\-\+\=\_\~]*$'),
        homeroom_number INTEGER,
        department VARCHAR(100) NOT NULL
         CONSTRAINT no_digits_specials_in_department CHECK(department ~ '^[^0-9@$!%*#?&)(\[\]\^\-\+\=\_\~]*$'),
        email VARCHAR(255) UNIQUE
         CONSTRAINT not_valid_email CHECK(email ~ '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'),
        phone VARCHAR(50)
         CONSTRAINT not_valid_phone_number CHECK(phone ~ '^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$')
    );
    ^^Went on a little journey with regex, and it's somewhat correctly working now.
      Not a task, but good experience.

    CREATE TABLE students (
        student_id SERIAL PRIMARY KEY,
        first_name VARCHAR(50) NOT NULL
         CONSTRAINT no_digits_specials_in_first_name CHECK(first_name ~ '^[^0-9@$!%*#?&)(\[\]\^\-\+\=\_\~]*$'),
        last_name VARCHAR(50) NOT NULL
         CONSTRAINT no_digits_specials_in_last_name CHECK(last_name ~ '^[^0-9@$!%*#?&)(\[\]\^\-\+\=\_\~]*$'),
        homeroom_number INTEGER,
        phone VARCHAR(50)
         CONSTRAINT not_valid_phone_number CHECK(phone ~ '^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$'),
        email VARCHAR(255) UNIQUE
         CONSTRAINT not_valid_email CHECK(email ~ '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$'),
        graduation_year INTEGER
         CONSTRAINT valid_year CHECK(graduation_year BETWEEN 1800 AND 2500)
    );

    INSERT INTO students(
        first_name,
        last_name,
        homeroom_number,
        phone,
        graduation_year
    )
    values (
        'Mark',
        'Watney',
        5,
        '777-555-1234',
        2035
    );

    INSERT INTO teachers(
        first_name,
        last_name,
        homeroom_number,
        department,
        email,
        phone
    )
    values (
        'Jonas',
        'Salk',
        5,
        'Biology',
        'jsalk@school.org',
        '777-555-4321'
    );

    SELECT *
    FROM students
    JOIN teachers ON teachers.homeroom_number = students.homeroom_number;

    SELECT
    student_id,
    students.first_name,
    students.last_name,
    teacher_id,
    students.homeroom_number
    FROM students
    JOIN teachers ON teachers.homeroom_number = students.homeroom_number;
    ! ^^We still can filter and join on homeroom_number, leaving it like this.

Correct. -> Correctly working solution, but I made phones NOT UNIQUE, because there's cases when 2 people
            can live together, and we're not given MOBILE phones as standard.
            Plus extra regex_checks, because I went on a little experience over_this.

-------------------
Course solution:
To create the students table:

    CREATE TABLE students(
    student_id serial PRIMARY KEY,
    first_name VARCHAR(45) NOT NULL,
    last_name VARCHAR(45) NOT NULL,
    homeroom_number integer,
    phone VARCHAR(20) UNIQUE NOT NULL,
    email VARCHAR(115) UNIQUE,
    grad_year integer);

To create the teachers table:

    CREATE TABLE teachers(
    teacher_id serial PRIMARY KEY,
    first_name VARCHAR(45) NOT NULL,
    last_name VARCHAR(45) NOT NULL,
    homeroom_number integer,
    department VARCHAR(45),
    email VARCHAR(20) UNIQUE,
    phone VARCHAR(20) UNIQUE);

Then for inserting the student information:

    INSERT INTO students(first_name,last_name,
    homeroom_number,phone,grad_year)
    VALUES ('Mark','Watney',5,'7755551234',2035);

Then for inserting the teacher information:

    INSERT INTO teachers(first_name,last_name,
    homeroom_number,department,email,phone)
    VALUES ('Jonas','Salk',5,'Biology','jsalk@school.org','7755554321');
