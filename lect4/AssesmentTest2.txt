#1
How can you retrieve all the information from the cd.facilities table?
!
SELECT *
FROM cd.facilities;
! Explicitly choosing *cd* because there's 2 schemas: cd and public, public is empty.

Correct.

Course solution:
select * from cd.facilities;
-------------
#2
You want to print out a list of all the facilities and their cost to members.
How would you retrieve a list of only facility names and costs?
!
SELECT name, membercost
FROM cd.facilities;
!

Correct.

Course solution:
select name, membercost from cd.facilities;
-------------
#3
How can you produce a list of facilities that charge a fee to members?
!
SELECT facid, name
FROM cd.facilities
WHERE membercost > 0;
!

Correct. <- But im not giving all data on facility, which isn't a problem in this case we're not asked for this.

Course solution:
select * from cd.facilities where membercost > 0;
-------------
#4
How can you produce a list of facilities that charge a fee to members,
 and that fee is less than 1/50th of the monthly maintenance cost?
Return the facid, facility name, member cost, and monthly maintenance
 of the facilities in question.
!
SELECT facid, name, membercost, monthlymaintenance
FROM cd.facilities
WHERE membercost < monthlymaintenance / 50;
!

Correct. <- Im not explicitly choosing higher than 0 and not using float as 50.0,
            because cost can't be negative and it's pointless to check this and there's no reason to use float if
            we're just less than 50.

Course solution:
select facid, name, membercost, monthlymaintenance
from cd.facilities where membercost > 0 and (membercost < monthlymaintenance/50.0);
-------------
#5
How can you produce a list of all facilities with the word 'Tennis' in their name?
!
SELECT facid, name
FROM cd.facilities
WHERE name LIKE '%Tennis%';
!

Correct. <- Again I don't take any extra data on facility, we're not asked to do this.

Course solution:
select * from cd.facilities where name like '%Tennis%';
-------------
#6
How can you retrieve the details of facilities with ID 1 and 5?
Try to do it without using the OR operator.
!
SELECT *
FROM cd.facilities
WHERE facid IN (1, 5);
!

Correct.

Course solution:
select * from cd.facilities where facid in (1,5);
-------------
#7
How can you produce a list of members who joined after the start of September 2012?
Return the memid, surname, firstname, and joindate of the members in question.
!
SELECT memid, surname, firstname, joindate
FROM cd.members
WHERE joindate >= '2012-09-01';
! start of september 2012 can be 00:01 of september 01, then it's more correct to use >=.

Correct.

Course solution:
select memid, surname, firstname, joindate from cd.members where joindate >= '2012-09-01';
-------------
#8
How can you produce an ordered list of the first 10 surnames in the members table?
The list must not contain duplicates.
!
SELECT DISTINCT surname
FROM cd.members
WHERE surname != 'GUEST'
ORDER BY surname
LIMIT 10;
! In case if we need to return just 10 names from ORDERED column,
  but if we need 10 surnames as different COLUMN from original column and only then ORDERED ->
-> !
SELECT surname
FROM cd.members
WHERE surname in
(
	SELECT DISTINCT surname
	FROM cd.members
	WHERE surname != 'GUEST'
	LIMIT 10
)
ORDER BY surname;
! Now it's a list(column) with first 10 DISTINCT surnames from a members_table, and only after
  these 10 unique members taken and GUEST is excluded we're sorting them in alphabetical order.

Correct. <- But I made an extra solution for bad_wording in a task, because it can be read as
            *Take 10 first names from members table and SORT them*, at least I was confused by wording.
            Or it's just leetcode flashbacks with me trying to see some traps.

Course solution:
select distinct surname from cd.members order by surname limit 10;
-------------
#9
You'd like to get the signup date of your last member. How can you retrieve this information?
!
SELECT memid, surname, firstname, joindate
FROM cd.members
ORDER BY memid DESC
LIMIT 1;
! There's no column with SIGNUP date, so I guess it's same as JOINDATE.
  Or we can just take max(joindate) ->
-> !
SELECT max(joindate)
FROM cd.members;
! It should be always correct data, because IF someone new joins it's 100%
  becomes a last_joined_member, and it's date will always be higher than anyone else.
  But first gives is all data on member, and this only shows last time someone SIGNED(joined).

Correct. <- But I made an extra solution to find data on that member, not just date when he/her/them joined.

Course solution:
select max(joindate) as latest from cd.members;
-------------
#10
Produce a count of the number of facilities that have a cost to guests of 10 or more.
!
SELECT COUNT(facid) AS guestprice_he_10
FROM cd.facilities
WHERE guestcost >= 10;
!

Correct.

Course solution:
select count(*) from cd.facilities where guestcost >= 10;
-------------
#11
Skip this one, no question for #11.
^^WTF? HighQuality bootcamp hehe.

#12
Produce a list of the total number of slots booked per facility in the month of September 2012.
Produce an output table consisting of facility id and slots, sorted by the number of slots.
!
SELECT facid, all_slots
FROM
(
	SELECT
	facid,
	SUM(slots) as all_slots,
	extract(month FROM starttime) AS month,
	extract(year FROM starttime) AS year
	FROM cd.bookings
	GROUP BY
	facid,
	month,
	year
	HAVING
	extract(month FROM starttime) = '09'
	AND
	extract(year FROM starttime) = '2012'
	ORDER BY all_slots
) as test1;
! facid -> all_slots => all unique facilities with sum of all_slots in 2012-09.
  There's a problem with GROUP BY, which is I can't filter month, year without extra SELECT.
  Ok. Fixed ->
-> !
SELECT
facid,
SUM(slots) as all_slots
FROM cd.bookings
WHERE
extract(month FROM starttime) = '09'
AND
extract(year FROM starttime) = '2012'
GROUP BY
facid
ORDER BY all_slots;
! Both are the same working solutions, just some trouble with filtering(low experience).
  99% sure there's a better way to check date but w.e.

TEST:
!
SELECT
SUM(slots)
FROM cd.bookings
WHERE
facid = 0
AND
EXTRACT(month FROM starttime) = 9
AND
EXTRACT(year FROM starttime) = 2012;
! Tested with this Query to get all data by facid, to check if it's correct.

Correct. <- Both working and correct, but I'm checking date as EXTRACT. Same result.

Course solution:
select facid, sum(slots) as "Total Slots"
from cd.bookings where starttime >= '2012-09-01' and starttime < '2012-10-01'
group by facid order by sum(slots);
-------------
#13
Produce a list of facilities with more than 1000 slots booked.
Produce an output table consisting of facility id and total slots, sorted by facility id.
!
SELECT
facid,
SUM(slots) as all_slots
FROM cd.bookings
GROUP BY
facid
HAVING
SUM(slots) > 1000
ORDER BY facid;
!

Correct.

Course solution:
select facid, sum(slots) as "Total Slots"
from cd.bookings group by facid
having sum(slots) > 1000
order by facid;
-------------
#14
How can you produce a list of the start times for bookings for tennis courts, for the date '2012-09-21'?
Return a list of start time and facility name pairings, ordered by the time.
!
SELECT
cd.facilities.name || ' id: ' || cd.facilities.facid AS court,
cd.bookings.starttime AS bookingtime
FROM cd.facilities
JOIN cd.bookings ON cd.bookings.facid = cd.facilities.facid
WHERE
cd.facilities.name LIKE 'Tennis Court%'
AND
cd.bookings.starttime >= '2012-09-21'
AND
cd.bookings.starttime < '2012-09-22'
ORDER BY cd.bookings.starttime;
! *facility name pairings* <- is this pairs like Tennis Court? Or it's pairs of name and something?
  Made this as a pair of FacilityName and FacilityID.

Correct. <- But im using JOIN from booking to facilities, and they're using facilities to booking.
            Extra to that im filtering correct facilities by NAME 'Tennis Court%' as we asked in a task,
            and they're taking ID's of these facilities which we can't know as default it's incorrect in my opinion.
            Date check is the same, but Naming of columns is different, but it doesn't make difference.

Course solution:
select
 bks.starttime as start,
 facs.name as name
from cd.facilities facs
inner join cd.bookings bks on facs.facid = bks.facid
where
 facs.facid in (0,1) and bks.starttime >= '2012-09-21'
 and bks.starttime < '2012-09-22'
order by bks.starttime;

-------------
#15
How can you produce a list of the start times for bookings by members named 'David Farrell'?
!
SELECT
cd.bookings.bookid,
cd.members.firstname as first_name,
cd.members.surname as last_name,
cd.bookings.starttime
FROM cd.members
JOIN cd.bookings ON cd.bookings.memid = cd.members.memid
WHERE
cd.members.firstname LIKE 'David'
AND
cd.members.surname LIKE 'Farrell'
ORDER BY cd.bookings.starttime;
! bookid -> first_name -> last_name -> starttime => More explicit than just starttime.
  Or I can combine first_name + last_name for better visual.
!
SELECT
cd.bookings.bookid,
cd.members.firstname || ' ' || cd.members.surname AS member,
cd.bookings.starttime
FROM cd.members
JOIN cd.bookings ON cd.bookings.memid = cd.members.memid
WHERE
cd.members.firstname LIKE 'David'
AND
cd.members.surname LIKE 'Farrell'
ORDER BY cd.bookings.starttime;
! Extra, I could change LIKE '%David%' for leading zeroes and make %Farrel%,
  but assume we're not making such mistakes.

Correct. <- But im giving extra data on who person is and what bookid taken.

Course solution:
select bks.starttime
from cd.bookings bks inner join cd.members mems on mems.memid = bks.memid
where mems.firstname='David' and mems.surname='Farrell';
-------------
